#!/usr/bin/env node

const ogs = require("open-graph-scraper");
const fs = require("fs");
const md = require("markdown-it")({
  linkify: true
});
const truncate = require("truncate");
const path = require("path");
const octokit = require("@octokit/rest")();
const { URL } = require("url");
const { default: mjml2html } = require("mjml");

function usage() {
  console.error('Usage: \n  node card.js 8 "9 Nov 2018"');
  process.exit(1);
}

const issue = process.argv[2];
const date = process.argv[3];

// prettier-ignore
const MAILCHIMP_HEADER_IMAGES = {
  2: "https://gallery.mailchimp.com/155aa5558694a008de40fe987/images/6441b0d8-bf34-4a9a-bed3-657beb2c5c9b.png",
  3: "https://gallery.mailchimp.com/155aa5558694a008de40fe987/images/7dcbb11f-a1e4-46ef-8c7e-0abfec7bda97.png",
  4: "https://gallery.mailchimp.com/155aa5558694a008de40fe987/images/1b1bde12-b7ad-46ab-acbb-df5fb7216aaf.png",
  5: "https://gallery.mailchimp.com/155aa5558694a008de40fe987/images/26c03b91-f776-4149-bbdf-58813cfe9828.png",
  6: "https://gallery.mailchimp.com/155aa5558694a008de40fe987/images/04ecb2e4-bf1b-4942-91c9-275fa7bffde7.png",
  7: "https://gallery.mailchimp.com/155aa5558694a008de40fe987/images/891dea1c-21c9-400e-a265-ec93d388fc25.png",
  8: "https://gallery.mailchimp.com/155aa5558694a008de40fe987/images/bc922b05-2122-4743-8ecb-a6be2a69ca6b.png",
  9: "https://gallery.mailchimp.com/155aa5558694a008de40fe987/images/10fb86e7-bd1e-4a39-943c-897dc9d98d24.png",
  10: "https://gallery.mailchimp.com/155aa5558694a008de40fe987/images/87ebf885-d51a-437b-9260-df40fc269052.png",
  11: "https://gallery.mailchimp.com/155aa5558694a008de40fe987/images/e6e3ea64-d309-4b41-91f8-53042e37dd33.png",
  12: "https://gallery.mailchimp.com/155aa5558694a008de40fe987/images/c4112e2d-5599-4d16-a684-75d72a01478b.png",
};

if (!issue) {
  console.error(`Invalid issue number passed as parameter: ${issue}\n`);
  usage();
}
if (!date) {
  console.error(`Invalid date passed as parameter: ${date}\n`);
  usage();
}

const SRC_DIR = path.join(__dirname, "../src");

const rawFile = fs.readFileSync(`${SRC_DIR}/issues/${issue}/README.md`, {
  encoding: "UTF-8"
});
const tweets = rawFile.split("---").map(s => s.trim());

let cards = [];

let calledTimes = 0;
function done() {
  if (calledTimes < tweets.length - 1) {
    calledTimes++;
    return;
  }

  fs.writeFileSync(`${SRC_DIR}/issues/${issue}/email.html`, createEmail(cards));
  console.log("Done.");
  process.exit(0);
}

tweets.forEach(async (tweet, index) => {
  const endsWithUrl = tweet
    .split(/\s+/)
    .slice(-1)[0]
    .startsWith("http");

  if (!endsWithUrl) {
    cards[index] = createCard(index, tweet);
    done();
  } else {
    const url = tweet.split(/\s+/).slice(-1)[0];
    const imageUrl = await urlToImage(url);
    cards[index] = createCard(index, tweet, url, imageUrl);
    done();
  }
});

function simpleMarkdown(text) {
  return md.render(text);
}

const GITHUB_TITLE_SEPARATOR = /(.*)\ ·\ (Pull\ Request|Issue)\ (.*)/;
function createCard(index, tweet, url, imageUrl) {
  let openDataLink = "";
  let text = tweet;

  if (imageUrl) {
    text = stringReplaceLast(tweet, url, "").trim();

    openDataLink = `
      <table border="0" cellpadding="0" cellspacing="0" style="max-width:100%; min-width:100%; margin-top: 10px;" width="100%">
        <tbody>
          <tr>
            <td width="30px" valign="middle">
              <a href="${url}">
                <img src="${imageUrl}" width="30" style="border-radius:30px;margin:0;" />
              </a>
            </td>
            <td style="line-height:1.3; padding-left: 10px;">
              <a href="${url}">${url}</a>
            </td>
          </tr>
        </tbody>
      </table>
    `.trim();
  }

  return `
    <mj-section ${index !== 0 ? 'padding-top="0"' : ""}>
      <mj-column css-class="small-padding-mobile">
        <mj-text>
          ${simpleMarkdown(text)}
          ${openDataLink ? openDataLink : ""}
        </mj-text>
      </mj-column>
    </mj-section>
  `.trim();
}

function createEmail(cards) {
  const template = fs.readFileSync(`${SRC_DIR}/issue-template.mjml`, {
    encoding: "UTF-8"
  });

  const cardsHtml = cards.join("\n");
  let html = template.replace("PASTE HTML HERE", cardsHtml);
  html = html.replace(/Issue 1 \– 21 Aug 2018/g, `Issue ${issue} – ${date}`);
  html = html.replace(
    "./issue.png",
    MAILCHIMP_HEADER_IMAGES.hasOwnProperty(issue)
      ? MAILCHIMP_HEADER_IMAGES[issue]
      : "./issue.png"
  );

  return mjml2html(html).html;
}

async function urlToImage(url) {
  let match;

  // We test special URL patterns to extract the proper image e.g for a Github
  // view that shows all commits of a given user.
  const GITHUB_COMMIT_FILTER_URL_REGEX = /\/commits\?author=([a-zA-Z0-9-_]+)/;
  if ((match = url.match(GITHUB_COMMIT_FILTER_URL_REGEX))) {
    const [_, username] = match;
    const result = await octokit.users.getForUser({ username });
  } else {
    return new Promise((resolve, reject) => {
      ogs({ url, timeout: 5000 }, function(error, ogsResults) {
        if (error) {
          reject(new Error("Error:", error, ogsResults));
          process.exit(1);
        }

        let ogUrl = ogsResults.data.ogImage.url;
        if (ogUrl[0] === "/") {
          const parsedUrl = new URL(url);
          ogUrl = parsedUrl.origin + ogUrl;
        }
        resolve(ogUrl);
      });
    });
  }
}

function stringReplaceLast(string, prevWord, newWord) {
  const n = string.lastIndexOf(prevWord);
  return string.slice(0, n) + string.slice(n).replace(prevWord, newWord);
}
